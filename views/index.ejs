<!DOCTYPE html>
<!-- front end for movie night web chat application -->
<!-- author: PKXH -->
<html>
  <head>
    <title>Movie Night All-Platform Group Chat</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {font: 13px Helvetica, Arial; }
        form { background: #fff; padding: 3px; position: static; bottom: 0; width: 100%; border-color: #000; border-top-style: solid; border-top-width: 1px;}
        form input { border-style: solid; border-width: 1px; padding: 10px; width: 85%; margin-right: .5%; }
        form button { width: 9%; background: #6495ED; border: none; padding: 10px; margin-left: 2%; }
        #messages { list-style-type: none; margin: 0; padding: 0; }
        #messages li { padding: 5px 10px; }
        #messages li:nth-child(odd) { background: #eee; }
    </style>
    <!--script src="showdown.js"></script-->
    <script src="../../socket.io/socket.io.js"></script>
    <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>
  </head>
  <body>

    <div class="message-container">
      <ul id="messages">
        <!-- here's where we display the pre-session chat history from the db --> 
        <% for(let i=0; i<msgs.length; i++) { %>
            <li><strong><%= msgs[i].username %></strong> <%-msgs[i].text %></li>
        <% } %>
      </ul>
    </div>

    <div class="input-container">
      <form action="/" method="POST" id="chatForm">
        <input id="txt" autocomplete="off" autofocus="on" oninput="isTyping()" placeholder="type your message here..." /><button>Send</button>
      </form>
    </div>

    <script>

        //
        // Extension to block <p></p> thrown in by showdown module
        //
        // see: https://jsfiddle.net/tivie/5jd4nr2a/
        // see: https://github.com/showdownjs/showdown/issues/573
        //
        showdown.extension('only-inline-stuff', function () {
            return [{
                type: 'output',
                filter: function (text) {
                    // remove paragraphs
                    text = text.replace(/<\/?p[^>]*>/g, '');

                    // remove code (if you want)
                    text = text.replace(/<\/?code[^>]*>/g, '');

                    //add other stuff here that you want to remove
                    // text = text.replace(, '');
                    return text;
                }
            }];
        });


        //
        // use this to expand markdown to html
        //
        try {
            var converter = new showdown.Converter( { extensions: ['only-inline-stuff'] } );
        }
        catch(err) {
            console.log( 'error initialing showdown converter (' + err + ')' );
            throw(err);
        }

        //
        // connect using the passed-in port number
        //
        var ip = location.hostname;
        var port = <%= port %>;
        var socket = io.connect('http://'+ip+':'+port);
        var username = sessionStorage.getItem('username');
        var block_reloading_refresh = sessionStorage.getItem('block_reloading_refresh');
        var last_text = sessionStorage.getItem('last_text');

        //
        // render html-injection harmless
        // see: https://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript
        //
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        //
        // submit (html-injection-disabled, markdown-html-expanded) text message without reloading the page
        //
        //
        function on_chat_received( success ) {
            if (success) {
                sessionStorage.setItem('last_text', '');
                last_text = '';
            } else {
                //
                // we expect this condition when the connection has been quietly dropped; have the
                // user (auto)sign in again
                //
                sessionStorage.setItem('last_text', last_text);
                window.location.reload(true);
            }
        }
        //
	// *** callback ***
	//
        function send_chat_message( text, on_chat_message_sent ) {
            socket.emit('chat_message',
                        username,
                        last_text = converter.makeHtml( escapeHtml( text ) ),
                            function(success) {
                                on_chat_received( success );
                                if (on_chat_message_sent != null) {
                                    on_chat_message_sent();
                                }
                            }
                        );
        }

        //
        // verify that we have a non-empty value
        //
        function value_is_set(value) {
            return(value && value !== "" && !value.match(/^[ ]+$/i))
        }

        //
        // ask for a username
        //
        function get_username( on_get_username_complete ) {
            //
            // if we're silently reconnecting, this username should already be set,
            // so we may not even run this loop even once
            //
            while (!value_is_set(username)) {
                username = prompt('Choose a screen name');
            }

            socket.emit('username',
                username,
                function( success ) {
                    on_username_received( success );
                    if (on_get_username_complete != null) {
                        on_get_username_complete( success );
                    }
                }
            );
        }
        //
        // *** callback ***
        //
        function on_username_received( success ) {
            if (success) {
                sessionStorage.setItem('username', username);
            }
        }

        $('form').submit(function(e){
            e.preventDefault(); // prevents page reloading
            //socket.emit('chat_message', last_text = converter.makeHtml( escapeHtml( $('#txt').val() ) ), on_chat_received );
            send_chat_message( $('#txt').val() );
            $('#txt').val(''); // clear the text box
            return false;
        });

        //
        // append the chat text message
        //
        socket.on('chat_message', function(msg) {
            $('#messages').append($('<li>').html(msg));
            window.scroll(0, document.documentElement.offsetHeight);
        });

        //
        // append text if someone is online
        //
        socket.on('is_online', function(username) {
            $('#messages').append($('<li>').html(username));
            window.scroll(0, document.documentElement.offsetHeight);
        });

        //
        // we have silently reconnected, and there may have been a message that was
        // in the middle of being sent when we got into this mess -- we should be back on
        // now so resend it
        //
        function on_silent_reconnect_complete( success ) {
            if (success) {
                if (last_text != null && last_text.length > 0) {
                    send_chat_message( last_text );
                }
            }
        }

        //
        // everything is set up; ask the user to log in
        //
        if (block_reloading_refresh == null) {
            sessionStorage.setItem('block_reloading_refresh', 'active');
            window.location.reload(true);
        } else {
            get_username( username!=null ? on_silent_reconnect_complete : null );
        }
        block_reloading_refresh = null;

    </script>
  </body>
</html>
